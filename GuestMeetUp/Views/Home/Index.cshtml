@model GuestMeetUp.Models.GuestInfoModel
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/js/Common.js"></script>

<form id="frmNewEnv" onsubmit="sendForm(event)" asp-controller="Home" asp-action="Index" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <br />
    <div class='row'>
        <hr />
        <h3>Guest Information</h3>
        <div class=" border-new">
            <input type="hidden" id="CollegeShortName" name="CollegeShortName" value="@Model.CollegeShortName" />
            <div class="form-group mb-3">
                @Html.LabelFor(Model => Model.userfile, htmlAttributes: new { @class = "control-label" })
                <span class="required-marker">*</span><br />
                <input asp-for="userfile" type="file" class="form-control-file" accept="image/*;capture=camera" onchange="checkValidation(this)" id="fileInput" />
                @Html.ValidationMessageFor(Model => Model.userfile, "", new { @class = "text-danger" })
            </div>



            @* <input id="myFileInput" type="file" accept="image/*;capture=camera">*@
            <div class="form-group">
                @*<input asp-for="stdEmpId" type="hidden" value="@Model.stdEmpId" />*@
                <div class="col mb-3">
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.Name, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>
                        @Html.TextBoxFor(Model => Model.Name, new { @class = "form-control", id = "txtusrNameGrilPortal",oninput = "upperLowerInput(this)", maxlength=100 })

                        @Html.ValidationMessageFor(Model => Model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col mb-3">
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.CollegeOrgName, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>
                        @Html.TextBoxFor(Model => Model.CollegeOrgName, new { @class = "form-control", id = "txtCollegeOrgName",oninput = "upperLowerInput(this)", maxlength=100 })
                        @Html.ValidationMessageFor(Model => Model.CollegeOrgName, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (Model.CollegeShortName == "")
                {
                    <div class="col mb-3" style="display:none;">
                        <div><label>Guest Type<span class="required-marker">*</span></label></div>
                        <div class="form-outline">
                            <input class="form-check-input" type="radio" asp-for="GuestType" value="Faculty" id="radio-Faculty" checked>
                            <label class="form-check-label" for="radio-Male">Faculty</label>

                            <input class="form-check-input" type="radio" asp-for="GuestType" value="Student" id="radio-Student">
                            <label class="form-check-label" for="radio-Female">Student</label>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col mb-3">
                        <div><label>Guest Type<span class="required-marker">*</span></label></div>
                        <div class="form-outline">
                            <input class="form-check-input" type="radio" asp-for="GuestType" value="Faculty" id="radio-Faculty" checked>
                            <label class="form-check-label" for="radio-Male">Faculty</label>

                            <input class="form-check-input" type="radio" asp-for="GuestType" value="Student" id="radio-Student">
                            <label class="form-check-label" for="radio-Female">Student</label>
                        </div>
                    </div>
                }
                <div data-mdb-input-init class="form-outline mb-3">
                    @Html.LabelFor(Model => Model.BirthYear, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>

                    <select class="form-control" id="BirthYear" name="BirthYear">
                        @{
                            // Generate a list of years from 1900 to the current year
                            <option value="-1">Select</option>
                            int currentYear = 2005;//DateTime.Now.Year;
                            for (int year = currentYear; year >= 1900; year--)
                            {
                                <option value="@year">@year</option>
                            }
                        }
                    </select>

                    @Html.ValidationMessageFor(Model => Model.BirthYear, "", new { @class = "text-danger" })
                </div>

                <div class="col mb-3">
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.GuestAge, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(Model => Model.GuestAge, new { @class = "form-control", id = "txtusrAge", @readonly="readonly" })

                        @Html.ValidationMessageFor(Model => Model.GuestAge, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col mb-3">
                    <div><label>Gender<span class="required-marker">*</span></label></div>
                    <div class="form-outline">
                        <input class="form-check-input" type="radio" asp-for="Gender" value="Male" id="radio-Male" checked>
                        <label class="form-check-label" for="radio-Male">Male</label>

                        <input class="form-check-input" type="radio" asp-for="Gender" value="Female" id="radio-Female">
                        <label class="form-check-label" for="radio-Female">Female</label>
                    </div>
                </div>
                <div class="col mb-3">
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.EmailAddress, new { @class = "control-label" })<span class="required-marker">*</span>
                        @Html.TextBoxFor(Model => Model.EmailAddress, new { @class = "form-control", id = "txtEmail",oninput = "validateEmailId(this)"})
                        <span id="EmailValidError" class="text-danger"></span>
                        @Html.ValidationMessageFor(Model => Model.EmailAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col mb-3">
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.PhoneNumber, new { @class = "control-label" })<span class="required-marker">*</span>
                        @Html.TextBoxFor(Model => Model.PhoneNumber, new { @class = "form-control", id = "txtMobileNumber", oninput = "validateMobileNumber(this)" ,minlength = "10" ,maxlength="10"})
                        <span id="mobileNumberError" class="text-danger"></span>
                        @Html.ValidationMessageFor(Model => Model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col mb-3">
                    <!-- GPU input -->
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.GuestProof, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>
                        <select class="form-select" id="GuestProofid" asp-for="GuestProof" asp-items="Model.GuestIdProof"></select>
                        @* <select class="form-select" asp-for="GuestProof" asp-items="Model.GuestIdProof"></select> *@
                    </div>
                </div>
                <div class="form-group mb-3">
                    @Html.LabelFor(Model => Model.userIdProof, htmlAttributes: new { @class = "control-label" })
                    <span class="required-marker">*</span><br />
                    <input asp-for="userIdProof" type="file" class="form-control-file" accept="image/*;capture=camera" onchange="checkValidation(this)" id="userIdProof" />
                    @Html.ValidationMessageFor(Model => Model.userIdProof, "", new { @class = "text-danger" })
                </div>
                <div class="col mb-3" style="display:none;">
                    <div>@Html.LabelFor(Model => Model.MealType, new { @class = "control-label" })<span class="required-marker">*</span></div>
                    <div class="form-outline">
                        <input class="form-check-input" type="radio" asp-for="MealType" value="Veg" id="radio-Veg" checked>
                        <label class="form-check-label" for="radio-Veg">Veg</label>

                        <input class="form-check-input" type="radio" asp-for="MealType" value="Non-Veg" id="radio-NonVeg">
                        <label class="form-check-label" for="radio-NonVeg">Non-Veg</label>
                    </div>
                </div>
                <div class="col mb-3" style="display:none;">
                    <div>@Html.LabelFor(Model => Model.TransportRequired, new { @class = "control-label" })<span class="required-marker">*</span></div>
                    <div class="form-outline">
                        <input class="form-check-input" type="radio" asp-for="TransportRequired" value="No" id="radio-No" checked>
                        <label class="form-check-label" for="radio-No">No</label>
                        <input class="form-check-input" type="radio" asp-for="TransportRequired" value="Yes" id="radio-Yes">
                        <label class="form-check-label" for="radio-Yes">Yes</label>
                    </div>
                </div>

                <div id="addressField" style="display: none;">
                    <div class="col mb-3">
                        <div>@Html.LabelFor(Model => Model.Address, new { @class = "control-label" })<span class="required-marker">*</span></div>
                        <div class="form-outline">
                            @Html.TextAreaFor(Model => Model.Address, new {@class = "form-control", id = "txtAddress", maxlength="500", oncopy="return false", onpaste="return false"})
                            @Html.ValidationMessageFor(Model => Model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col mb-3" style="display:none;">
                    <div>@Html.LabelFor(Model => Model.GSpouse, new { @class = "control-label" })<span class="required-marker">*</span></div>
                    <div class="form-outline">
                        <input class="form-check-input" type="radio" asp-for="GSpouse" value="No" id="radio-SpouseNo" checked>
                        <label class="form-check-label" for="radio-SpouseNo">No</label>
                        <input class="form-check-input" type="radio" asp-for="GSpouse" value="Yes" id="radio-SpouseYes">
                        <label class="form-check-label" for="radio-SpouseYes">Yes</label>
                    </div>
                </div>

                <div id="spouseDetails" style="display: none;">
                    <div class="col mb-3">
                        <div data-mdb-input-init class="form-outline">
                            @Html.LabelFor(Model => Model.GSpouse.SpouseName, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>
                            @Html.TextBoxFor(Model => Model.GSpouse.SpouseName, new { @class = "form-control", id = "txtSpouseName",oninput = "upperLowerInput(this)", maxlength="100" })
                            @Html.ValidationMessageFor(Model => Model.GSpouse.SpouseName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div data-mdb-input-init class="form-outline">
                        @Html.LabelFor(Model => Model.GSpouse.SpousBirthYear, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>

                        <select class="form-control" id="SpousBirthYear" name="GSpouse.SpousBirthYear">
                            @{
                                // Generate a list of years from 1900 to the current year
                                <option value="-1">Select</option>
                                int currentSYear = 2000;//DateTime.Now.Year;
                                for (int year = currentSYear; year >= 1900; year--)
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        </select>

                        @Html.ValidationMessageFor(Model => Model.GSpouse.SpousBirthYear, "", new { @class = "text-danger" })
                    </div>

                    <div class="col mb-3">
                        <div data-mdb-input-init class="form-outline">
                            @Html.LabelFor(Model => Model.GuestSpouseAge, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBoxFor(Model => Model.GuestSpouseAge, new { @class = "form-control", id = "txtGuestSpouseAge",@readonly="readonly" })

                            @Html.ValidationMessageFor(Model => Model.GuestAge, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col mb-3">
                        <!-- GPU input -->
                        <div data-mdb-input-init class="form-outline">
                            @Html.LabelFor(Model => Model.GuestSpouseProof, htmlAttributes: new { @class = "control-label" })<span class="required-marker">*</span>
                            <select class="form-select" id="GuestSpouseProofid" asp-for="GuestSpouseProof" asp-items="Model.GuestSpouseIdProof"></select>
                            @* <select class="form-select" asp-for="GuestProof" asp-items="Model.GuestIdProof"></select> *@
                        </div>
                        <div class="form-group mb-3">
                            @Html.LabelFor(Model => Model.userSpouseIdProof, htmlAttributes: new { @class = "control-label" })
                            <span class="required-marker">*</span><br />
                            <input asp-for="userSpouseIdProof" type="file" class="form-control-file" accept="image/*;capture=camera" onchange="checkValidation(this)" id="SpouseIdProof" />
                            @*@Html.ValidationMessageFor(Model => Model.userIdProof, "", new { @class = "text-danger" })*@
                        </div>
                        <div class="col mb-3">
                            <div>@Html.LabelFor(Model => Model.GSpouse.SpousMealType, new { @class = "control-label" })<span class="required-marker">*</span></div>
                            <div class="form-outline">
                                <input class="form-check-input" type="radio" asp-for="GSpouse.SpousMealType" value="Veg" id="radio-SVeg" checked>
                                <label class="form-check-label" for="radio-SVeg">Veg</label>

                                <input class="form-check-input" type="radio" asp-for="GSpouse.SpousMealType" value="Non-Veg" id="radio-SNonVeg">
                                <label class="form-check-label" for="radio-SNonVeg">Non-Veg</label>
                            </div>
                        </div>
                    </div>

                    <div data-mdb-input-init class="form-outline" style="display: none;">
                        @Html.LabelFor(Model => Model.OtherRequest, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(Model => Model.OtherRequest, new { @class = "form-control", id = "txtOtherRequest",oninput = "upperLowerInput(this)", maxlength=100 })
                        @Html.ValidationMessageFor(Model => Model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-1">
            <button type="submit" class="btn button-70">Register</button>
            <button id="resetButton" type="reset" class="btn btn-danger" style="display:none">Reset</button>
        </div>
</form>
<hr />
<p class="footer">For assistance please call : <a href="tel:9873904161">9873904161</a></p>

@if (TempData["SuccessMessage"] != null)
{
    <script type="text/javascript">

        Swal.fire("Success", "@TempData["SuccessMessage"]", "success");
        var form = document.getElementById('frmNewUser');
        form.reset();
    </script>
    TempData.Remove("SuccessMessage");
}
@if (TempData["ErrorMessage"] != null)
{
    <script type="text/javascript">

        Swal.fire("info", "@TempData["ErrorMessage"]", "info");

    </script>
    TempData.Remove("ErrorMessage");
}


<script>
    var showLoader = function (form) {
        $("<div />").css({
            'position': 'fixed',
            'left': 0,
            'right': 0,
            'bottom': 0,
            'top': 0,
            'background': '#0020ff36',
            'z-index': '99',
            'text-align': 'center'
        }).appendTo($("body"))
            .append(
                $("<div />").addClass("center").append(
                    $("<div />").addClass("loader"),
                )
            );
    }
    var radioYes = document.getElementById('radio-Yes');
    var radioNo = document.getElementById('radio-No');
    var addressField = document.getElementById('addressField');

    // Function to toggle address field visibility
    function toggleAddressField() {
        if (radioYes.checked) {
            addressField.style.display = 'block';
        }
        else if (radioNo.checked) {
            addressField.style.display = 'none';
        }
    }

    // Event listener for radio button change
    radioYes.addEventListener('change', toggleAddressField);
    radioNo.addEventListener('change', toggleAddressField);

    var radioSpNo = document.getElementById('radio-SpouseNo');
    var radioSpYes = document.getElementById('radio-SpouseYes');
    var spouseDetails = document.getElementById('spouseDetails');

    // Function to toggle address field visibility
    function toggleSpouseField() {
        if (radioSpYes.checked) {
            spouseDetails.style.display = 'block';
        }
        else if (radioSpNo.checked) {
            spouseDetails.style.display = 'none';
        }
    }

    // Event listener for radio button change
    radioSpYes.addEventListener('change', toggleSpouseField);
    radioSpNo.addEventListener('change', toggleSpouseField);

    function sendForm(e) {
        //debugger;
        e.preventDefault();

        const myForm = document.getElementById('frmNewEnv');
        var txtGuestName = document.getElementById("txtusrNameGrilPortal").value;
        var txtPhone = document.getElementById("txtMobileNumber").value;
        var txtEmailId = document.getElementById("txtEmail").value;
        var ddSpouse = document.getElementById("SpousBirthYear").value;
        var ddguest = document.getElementById("BirthYear").value;

        var SpouseProofid = document.getElementById("GuestSpouseProofid").value;
        var GuestProofid = document.getElementById("GuestProofid").value;

        var SpouseName = document.getElementById("txtSpouseName").value;
        var SpouseProofId = document.getElementById("GuestSpouseProofid").value;
        var flagSpouse = false;
        var flagSpouseName = false;
        var flagSpouseProofType = false;
        if (radioSpYes.checked) {
            flagSpouse = ddSpouse.match(-1);
            flagSpouseName = !SpouseName.match(/\S/);
            flagSpouseProofType = SpouseProofid.match(-1);
        }


        if (!txtGuestName.match(/\S/) || !txtPhone.match(/\S/) || !txtEmailId.match(/\S/) || flagSpouseProofType || flagSpouse || flagSpouseName || GuestProofid.match(-1) || ddguest.match(-1) || !fileInput || !fileInput.files || fileInput.files.length === 0 || !userIdProof || !userIdProof.files || userIdProof.files.length === 0) {
            Swal.fire({
                title: "Please fill all fields! All fields are required.",
                icon: 'error',
                timer: 2000,
                showConfirmButton: false
            });
            return;
        }
        else {
            Swal.fire({
                title: "Do you want to submit?",
                icon: 'question',
                showCancelButton: true
            }).then(result => {
                if (result.isConfirmed) {
                    showLoader();
                    myForm.submit();
                }
            });
        }

    }
    document.getElementById('resetButton').addEventListener('click', function () {
        // Get the form element
        var form = document.getElementById('frmNewEnv');
        // Reset the form
        form.reset();
    });


    function validateEmailId(input) {
        // Regular expression for basic email validation
        var re = /^\S+@@\S+\.\S+$/;

        // Remove non-email characters from input value
        input.value = input.value.replace(/[^\w@@.-]/g, '');

        // Trim and validate the email value
        var value = input.value.trim();
        var errorMessage = "";

        if (!re.test(value.toLowerCase())) {
            errorMessage = "Please enter a valid email address.";
        }

        // Display error message
        var errorElement = document.getElementById("EmailValidError");
        if (errorElement) {
            errorElement.innerText = errorMessage;
        }
    }

    function validateMobileNumber(input) {
        // Remove non-numeric characters from input value
        input.value = input.value.replace(/[^0-9]+/g, '');

        var value = input.value.trim();
        var errorMessage = "";

        if (value.length !== 10) {
            errorMessage = "Mobile number must be exactly 10 digits.";
        }

        document.getElementById("mobileNumberError").innerText = errorMessage;
    }


    function upperLowerInput(input) {
        // Replace any characters that are not lowercase and uppercase letters (a-z) or underscores (_) with an empty string
        input.value = input.value.replace(/[^a-zA-Z ]/g, '');
    }

    document.addEventListener('DOMContentLoaded', function () {
        var birthYearSelect = document.getElementById('BirthYear');
        var ageTextbox = document.getElementById('txtusrAge');
        var spouseBirthYear = document.getElementById('SpousBirthYear');
        var spouseAgeTextBox = document.getElementById('txtGuestSpouseAge');

        birthYearSelect.addEventListener('change', function () {
            // Calculate age based on selected birth year
            var selectedYear = parseInt(birthYearSelect.value);
            var currentYear = new Date().getFullYear();
            var age = currentYear - selectedYear;

            // Fill age into the textbox
            ageTextbox.value = age;
        });

        spouseBirthYear.addEventListener('change', function () {
            // Calculate age based on selected spouse's birth year
            var selectedYear = parseInt(spouseBirthYear.value);
            var currentYear = new Date().getFullYear();
            var age = currentYear - selectedYear;

            // Fill age into the spouse's age textbox
            spouseAgeTextBox.value = age;
        });
    });

    var reader = new FileReader();
    var fileName;
    var contentType;
    var Size = 0;
    function checkValidation(upload) {
        if (typeof (FileReader) != "undefined") {
            var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.jpg|.jpeg|.png|.pdf)$/;
            var file = upload.files[0];
            if (regex.test(file.name.toLowerCase())) {
                fileName = file.name;
                contentType = file.type;
                Size = file.size;
                reader.readAsDataURL(file);
            } else {
                alertSweetly("error", "This is not a valid image file.", file.name);
                upload.value = ""; // Clear the file input
                return false;
            }
        } else {
            // Handle FileReader not being supported
            alert("This browser does not support FileReader.");
        }
    }


    function alertSweetly(type, message, fileName = "") {
        alert(`${type}: ${message} ${fileName}`);
    }


</script>
