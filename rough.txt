// const handleAddLike = async (id, userLike) => {
  //   // console.log(id, userLike)

  //   if (userToken) {
  //     const endpoint = "discussion/discussionpost";
  //     const method = "POST";
  //     const headers = {
  //       'Content-Type': 'application/json',
  //       'auth-token': userToken
  //     };
  //     const like = userLike == 1 ? 0 : 1
  //     const body = {
  //       "reference": id,
  //       "likes": like
  //     };
  //     console.log(body)
  //     try {
  //       const data = await fetchData(endpoint, method, body, headers)
  //       if (!data.success) {
  //         // console.log(data)
  //         console.log("Error occured while liking the post")
  //       } else if (data.success) {
  //         // console.log(data);
  //         const updatedData = demoDiscussions.map((item) =>
  //           item.DiscussionID === id ? { ...item, userLike: like, likeCount: like === 1 ? item.likeCount + 1 : item.likeCount - 1 } : item
  //         );
  //         setDemoDiscussions(updatedData)
  //         console.log(updatedData)
  //       }
  //     } catch (error) {
  //       console.log(error);
  //     }
  //   }
  // };
  // const handleAddLike = () => setLikeCount(likeCount + 1);


// const handleChange = (e) => {
  //   const { name, value } = e.target;
  //   const options = name === 'categoryId' ? dropdownData.categoryOptions : dropdownData.companyCategoryOptions;
  //   const selectedOption = options.find(option => option.ddValue === value);

  //   // Check if selectedOption exists
  //   if (selectedOption) {
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: selectedOption.idCode,
  //     }));
  //   } else {
  //     // If no match, set the idCode to empty
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: selectedOption ? selectedOption.idCode : '',
  //     }));
  //   }
  // };

  // const handleChanges = (e) => {
  //   // console.log("this is category workshop/event", categoryId);
  //   const { name, value } = e.target;
  //   if (name === 'categoryId' || name === 'companyCategoryId') {
  //     // Find the corresponding idCode for the selected ddValue
  //     const options = name === 'categoryId' ? dropdownData.categoryOptions : dropdownData.companyCategoryOptions;
  //     const selectedOption = options.find(option => option.ddValue === value);
  //     console.log("optio conpamny", selectedOption)
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: selectedOption ? selectedOption.idCode : ''
  //     }));
  //   } else {
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: value
  //     }));
  //   }
  // };

  // const handleChange = (e) => {
  //   const { name, value } = e.target;

  //   // Handle dropdown fields (categoryId and companyCategoryId)
  //   if (name === 'categoryId' || name === 'companyCategoryId') {
  //     const options = name === 'categoryId' ? dropdownData.categoryOptions : dropdownData.companyCategoryOptions;
  //     const selectedOption = options.find(option => option.ddValue === value);

  //     // Update the state with the selected idCode
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: selectedOption ? selectedOption.idCode : '',
  //     }));
  //   } else {
  //     setNewEvent((prev) => ({
  //       ...prev,
  //       [name]: value, // Use the value directly for non-dropdown fields
  //     }));
  //   }
  // };
  



  export const deleteUser = (req, res) => {
  let success = false;
  const { userId } = req.body;
  const adminName = req.user?.id;
  try {
    connectToDatabase(async (err, conn) => {
      if (err) {
        logError(err);
        return res.status(500).json({
          success: false,
          data: err,
          message: "Database connection error.",
        });
      }
      try {
        const checkQuery = `SELECT * FROM Community_User WHERE UserID = ? AND (delStatus IS NULL OR delStatus = 0)`;
        const result = await queryAsync(conn, checkQuery, [userId]);
        if (result.length === 0) {
          return res.status(404).json({
            success: false,
            message: "User not found or already deleted.",
          });
        } else {
          try {
            const updateQuery = `UPDATE Community_User SET delStatus = 1, delOnDt = GETDATE(), AuthDel = ? OUTPUT inserted.UserID, inserted.delStatus, inserted.delOnDt, inserted.AuthDel WHERE UserID = ? AND (delStatus IS NULL OR delStatus = 0)`;
            const rows = await queryAsync(conn, updateQuery, [adminName, userId]);
            if (rows.length > 0) {
              success = true;
              logInfo("User deleted successfully");
              return res.status(200).json({
                success,
                data: {
                  userId: rows[0].UserID,
                  AuthDel: rows[0].AuthDel,
                  delOnDt: rows[0].delOnDt,
                  delStatus: rows[0].delStatus
                },
                message: "User deleted successfully.",
              });
            } else {
              logWarning("Failed to delete the user.");
              return res.status(404).json({
                rows,
                success: false,
                message: "Failed to delete the user.",
              });
            }
          } catch (error) {
            logError(updateErr);
            return res.status(500).json({
              success: false,
              data: updateErr,
              message: "Error updating user deletion.",
            });
          }
        }
      } catch (error) {
        return res.status(404).json({
          success: false,
          message: "Error Finding User's data!",
        });
      }
    });
  } catch (error) {
    return res.status(404).json({
      success: false,
      message: "Unable to connect to the database!",
    });
  }
};


